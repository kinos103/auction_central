using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace auction_central
{
    /// <summary>
    /// Interaction logic for AddItem.xaml
    /// </summary>
    public partial class AddItem : Page {
        private AuctionItem currItem;
        public AddItem()
        {
            InitializeComponent();
            currItem = new AuctionItem();
        }

        private bool Validate() {
            //TODO Add validate logic. ex numbers should parse, textBoxes are filled in

            // check if all boxes have text


            // check if all numerical boxes are able to be parsed


            // check if picture is uploaded


            // check if combo boxes have values chosen

            return true;
        }

        private void addItemButton_Click(object sender, RoutedEventArgs e) {
            bool hadError = false;
            if (!Validate()) {
                MessageBox.Show("One or more fields are wrong");
                return;
            }

            string itemName = this.itemName.Text;
            // TODO auctionID is probably autogenerated and not user entered
            int auctionID = Int32.Parse(this.auctionID.Text);
            int itemQuantity = Int32.Parse(this.itemQuantity.Text);

            //originalprice = startBid
            int startBid = Int32.Parse(this.startBid.Text);

            //should donorID be a string?
            string donor= this.donor.Text;

            int height = Int32.Parse(this.height.Text);
            int length = Int32.Parse(this.length.Text);
            int width = Int32.Parse(this.width.Text);

            
            var itemunit = (ComboBoxItem)ComboBox_units.SelectedItem;
            AuctionItem.ItemUnitEnum itemUnitToStore = AuctionItem.ItemUnitEnum.Feet;
            if (Equals(itemunit, meters_val))
            {
                itemUnitToStore = AuctionItem.ItemUnitEnum.Meters;

            }
            else if (Equals(itemunit, feet_val))
            {
                itemUnitToStore = AuctionItem.ItemUnitEnum.Feet;
            }
            else if (Equals(itemunit, cm_val))
            {
                itemUnitToStore = AuctionItem.ItemUnitEnum.Centimeters;
            }
            else
            {
                MessageBox.Show("Please Select a unit Type");
                hadError = true;
            }

            //string size = this.size.Text; will be is small ComboBox_small_item
            var issmall = (ComboBoxItem)ComboBox_small_item.SelectedItem;
            bool isSmallToStore = false;
            //dont allow question to be chosen in combobox
            if (Equals(issmall, yes)) {
                isSmallToStore = true;
            }
            else if (Equals(issmall, no)) {
                isSmallToStore = false;
            }
            else
            {
                MessageBox.Show("Is this a small item?");
                hadError = true;
            }

            string storageLocationText = storageLocation.Text;

            int condition = (int) conditionSlider.Value;

            if (hadError) {
                return;
            }

            currItem.Name = itemName;
            currItem.StorageLocation = storageLocationText;
            currItem.Quantity = itemQuantity;
            currItem.Height = height;
            currItem.Width = width;
            currItem.Length = length;
            currItem.StartingBid = startBid;
            currItem.IsSmall = isSmallToStore;
            currItem.Condition = condition;
            currItem.Comments = comments.Text;
            currItem.ItemUnit = itemUnitToStore;
            //TODO Set donor?

            //TODO use DbWrap to add item

        }

        private void NumberValidationTextBox(object sender, TextCompositionEventArgs e) {
            e.Handled = !IsTextAllowed(e.Text);
        }


        private static bool IsTextAllowed(string text)
        {
            Regex regex = new Regex(@"[^0-9.]+"); //regex that matches disallowed text
            return !regex.IsMatch(text);
        }

        private void TextBoxPasting(object sender, DataObjectPastingEventArgs e) {
            if (e.DataObject.GetDataPresent(typeof(String)))
            {
                String text = (String)e.DataObject.GetData(typeof(String));
                if (!IsTextAllowed(text))
                {
                    e.CancelCommand();
                }
            }
            else
            {
                e.CancelCommand();
            }
        }

        // TODO complete upload method
        private void UploadPhoto_OnClick(object sender, RoutedEventArgs e) {
            // open file explorer to pick image

            // create http post

            // send post

            // get url result

            // store url in auction item
        }
    }
}
